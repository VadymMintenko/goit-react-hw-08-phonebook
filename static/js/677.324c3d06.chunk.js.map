{"version":3,"file":"static/js/677.324c3d06.chunk.js","mappings":"iOAEaA,EAAWC,EAAAA,GAAAA,IAAH,sFAyBRC,GAnBYD,EAAAA,GAAAA,IAAH,sIAQgBA,EAAAA,GAAAA,IAAH,iNAWPA,EAAAA,GAAAA,GAAH,sIAQZE,EAAWF,EAAAA,GAAAA,GAAH,+MAWRG,EAAeH,EAAAA,GAAAA,OAAH,uE,oBC5CZI,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACnBC,EAAY,SAAAH,GAAK,OAAIA,EAAMI,MAAV,EAIjBC,GAAwBC,EAAAA,EAAAA,IACnC,CAACP,EAAaI,IACd,SAACF,EAAUG,GACT,OAAOH,EAASG,QAAO,qBAAGG,KACnBC,cAAcC,SAASL,EAAOI,cADd,GAGxB,I,kDCHCE,GAASC,EAAAA,EAAAA,IAAO,CAClBJ,MAAMK,EAAAA,EAAAA,MAASC,aAkEjB,EA/DqB,WACnB,IAIMZ,GAAWa,EAAAA,EAAAA,IAAYf,GACvBgB,GAAWC,EAAAA,EAAAA,MAgBjB,OACE,0BACE,SAAC,KAAD,CACEC,cAxBe,CACnBV,KAAM,GACNW,OAAQ,IAuBJC,iBAAkBT,EAClBU,SAnBe,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACxBC,EAAa,CACjBC,IAAIC,EAAAA,EAAAA,MACJlB,KAAMc,EAAOd,KACbW,OAAQG,EAAOH,QAEbjB,EAASyB,KAAI,SAAAC,GAAO,OAAIA,EAAQpB,IAAZ,IAAkBE,SAASc,EAAWhB,MAC5DqB,MAAM,WAAD,OAAYL,EAAWhB,KAAvB,sBAGPQ,GAASc,EAAAA,EAAAA,IAAYR,IACrBC,IACD,EAIG,UAKE,UAAC,KAAD,CAAMQ,aAAa,MAAnB,WACE,SAAC,KAAD,CAAcvB,KAAK,OAAOwB,UAAU,SAEpC,UAACrC,EAAD,mBAEE,SAAC,KAAD,CACEsC,KAAK,OACLzB,KAAK,OACL0B,QAAQ,yHACRC,MAAM,yIACNrB,UAAQ,QAGZ,UAACnB,EAAD,qBAEE,SAAC,KAAD,CACEsC,KAAK,MACLzB,KAAK,SACL0B,QAAQ,yFACRC,MAAM,+FACNrB,UAAQ,QAGZ,mBAAQmB,KAAK,SAAb,+BAKT,ECtCD,G,QA3Be,WACb,IAAMjB,GAAWC,EAAAA,EAAAA,MACXZ,GAASU,EAAAA,EAAAA,IAAYX,GAK3B,OACE,0BACE,uCAEE,kBACE6B,KAAK,OACLzB,KAAK,SACL4B,MAAO/B,EACPgC,SAZc,SAAAC,GACpBtB,GAASuB,EAAAA,EAAAA,GAAUD,EAAIE,OAAOJ,MAAMK,eACrC,QAeF,GC6BD,EA7CqB,WACnB,IAAMvC,GAAWa,EAAAA,EAAAA,IAAYT,GAEvBU,GAAWC,EAAAA,EAAAA,MAOjB,OACE,gCACG,KACD,SAAC,EAAD,KACA,SAACpB,EAAD,UACGK,EAASyB,KAAI,SAAAe,GACZ,OACE,UAAC5C,EAAD,YACE,yBAAI4C,EAAQlC,KAAZ,QACA,uBAAIkC,EAAQvB,UACZ,SAACpB,EAAD,CAAc4C,QAAS,kBAfXC,EAeiCF,EAAQjB,GAd/DT,GAAS6B,EAAAA,EAAAA,IAAeD,SACxB5B,GAASuB,EAAAA,EAAAA,GAAU,KAFG,IAAAK,CAeW,EAAvB,+BAHalB,EAAAA,EAAAA,MAQlB,OAEH,SAAC,EAAD,MAGL,C","sources":["components/ContactsForm.styled.js","Redax/contacts/selectors.js","components/ContactsForm.js","components/Filter.js","components/ContactsList.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FormFild = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n`;\n\nexport const Container = styled.div`\n  max-width: 1200px;\n  padding-left: 15px;\n  padding-right: 15px;\n  padding-top: 15px;\n  margin: 0 auto;\n`;\n\nexport const ContactsListSContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border: solid 1px gray;\n  border-radius: 5px;\n  width: 400px;\n  margin: 0 auto;\n  background-color: #f0f0f0;\n`;\n\nexport const ListContacts = styled.ul`\n  display: flex;\n  flex-direction: column;\n  list-style: none;\n  align-items: 'center';\n  padding: 0px;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  gap: 20px;\n  align-items: center;\n  justify-content: space-between;\n  outline: solid 1px gray;\n  border-radius: 5px;\n  margin-bottom: 5px;\n  padding: 10px;\n`;\n\nexport const DeleteButton = styled.button`\n  height: 20px;\n  background-color: #c0c0c0;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.filter;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) =>\n      name.toUpperCase().includes(filter.toUpperCase())\n    );\n  }\n);\n","import { Formik, Form, Field, ErrorMessage } from 'formik';\n// import PropTypes from 'prop-types';\nimport { object, string } from 'yup';\nimport { FormFild } from './ContactsForm.styled';\nimport { addContacts } from '../Redax/contacts/operations';\nimport { nanoid } from 'nanoid';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'Redax/contacts/selectors';\n\nlet schema = object({\n  name: string().required(),\n});\n\nconst ContactsForm = () => {\n  const initialValue = {\n    name: '',\n    number: '',\n  };\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const newContact = {\n      id: nanoid(),\n      name: values.name,\n      number: values.number,\n    };\n    if (contacts.map(contact => contact.name).includes(newContact.name)) {\n      alert(`Contact ${newContact.name} already exists.`);\n      return;\n    }\n    dispatch(addContacts(values));\n    resetForm();\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={initialValue}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <Form autoComplete=\"off\">\n          <ErrorMessage name=\"name\" component=\"div\" />\n\n          <FormFild>\n            Name\n            <Field\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </FormFild>\n          <FormFild>\n            Number\n            <Field\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </FormFild>\n          <button type=\"submit\">Add contact</button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\n// ContactsForm.propTypes = {\n//   handleSubmit: PropTypes.func.isRequired,\n// };\n\nexport default ContactsForm;\n","import React from 'react';\n// import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from 'Redax/contacts/selectors';\nimport { setFilter } from 'Redax/contacts/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  const searchContact = evt => {\n    dispatch(setFilter(evt.target.value.toLowerCase()));\n  };\n\n  return (\n    <div>\n      <label>\n        Search\n        <input\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={searchContact}\n        ></input>\n      </label>\n    </div>\n  );\n};\n\n// Filter.propTypes = {\n//   filter: PropTypes.string.isRequired,\n//   searchContact: PropTypes.func.isRequired,\n// };\n\nexport default Filter;\n","// import PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport { ListContacts, ListItem, DeleteButton } from './ContactsForm.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectVisibleContacts } from 'Redax/contacts/selectors';\nimport { deleteContacts } from '../Redax/contacts/operations';\nimport { setFilter } from 'Redax/contacts/filterSlice';\nimport ContactsForm from './ContactsForm';\nimport Filter from './Filter';\n\nconst ContactsList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  const dispatch = useDispatch();\n\n  const onDeleteContact = contactId => {\n    dispatch(deleteContacts(contactId));\n    dispatch(setFilter(''));\n  };\n\n  return (\n    <>\n      {' '}\n      <ContactsForm />\n      <ListContacts>\n        {contacts.map(element => {\n          return (\n            <ListItem key={nanoid()}>\n              <p>{element.name}:</p>\n              <p>{element.number}</p>\n              <DeleteButton onClick={() => onDeleteContact(element.id)}>\n                delete contact\n              </DeleteButton>\n            </ListItem>\n          );\n        })}\n      </ListContacts>\n      <Filter />\n    </>\n  );\n};\n\n// ContactsList.propTypes = {\n//   filter: PropTypes.string,\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//       id: PropTypes.string.isRequired,\n//     })\n//   ).isRequired,\n\n//   onDeleteContact: PropTypes.func.isRequired,\n// };\n\nexport default ContactsList;\n"],"names":["FormFild","styled","ListContacts","ListItem","DeleteButton","getContacts","state","contacts","items","getFilter","filter","selectVisibleContacts","createSelector","name","toUpperCase","includes","schema","object","string","required","useSelector","dispatch","useDispatch","initialValues","number","validationSchema","onSubmit","values","resetForm","newContact","id","nanoid","map","contact","alert","addContacts","autoComplete","component","type","pattern","title","value","onChange","evt","setFilter","target","toLowerCase","element","onClick","contactId","deleteContacts"],"sourceRoot":""}